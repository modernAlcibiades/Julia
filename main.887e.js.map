{"version":3,"sources":["webpack:///./src/config.js","webpack:///./src/sketches/sketch-julia.js","webpack:///./src/components/App/AppStateProvider/init-state.js","webpack:///./src/components/App/AppStateProvider/reducer.js","webpack:///./src/components/App/AppStateProvider/index.jsx","webpack:///./src/components/P5Wrapper/index.jsx","webpack:///./src/components/JuliaDisplay/index.jsx","webpack:///./src/components/About/index.jsx","webpack:///./src/components/Navbar/NavbarElements.js","webpack:///./src/components/Navbar/index.jsx","webpack:///./src/components/Dashboard/index.jsx","webpack:///./src/components/AppContent/index.jsx","webpack:///./src/components/App/index.jsx","webpack:///./src/index.jsx"],"names":["module","exports","apikey","s","hp","thresh","maxitr","xmin","xmax","ymin","ymax","r","theta","c1","c2","c3","c4","state","dispatch","ms","ss","vs","minval","maxval","vals","iterate_julia","a","b","i","fa","gcd","setup","createCanvas","console","log","draw","refresh","hash","length","val","parseInt","substring","push","map","PI","cos","sin","k","m","resetImage","pixelDensity","loadPixels","width","height","j","pix","grad","cols","pixels","updatePixels","type","payload","key","value","canv","get","canvas","saveArt","address","undefined","provider","balance","ns_client","NFTStorage","token","metadata","contract_address","FTMSCAN_API_KEY","bgndColor","errorMessage","successMessage","AppDispatchContext","createContext","AppStateContext","initState","AppStateProvider","children","useReducer","reducer","Provider","propTypes","PropTypes","any","isRequired","P5Wrapper","id","generate","sketch","sketchContainer","useRef","useEffect","window","p5","current","remove","ref","className","object","func","defaultProps","memo","_","nextProps","p5Wrapper","JuliaDisplay","useContext","redraw","_hash","Math","floor","random","toString","onClick","toBlob","blob","store","name","description","image","url","data","href","token_uri","ethereum","networkVersion","ethers","providers","Web3Provider","request","method","signer_address","contract","Contract","Julia","abi","getSigner","current_supply","mintOne","utils","parseEther","txn","wait","receipt","events","message","bl","sketchJulia","About","Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","Navbar","to","activeStyle","AppContent","basename","path","exact","component","prefix","Dashboard","render","document","querySelector"],"mappings":"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","file":"main.887e.js","sourcesContent":["module.exports = {\n    apikey: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGM5NUU2MmZEMzgyZjUwN0VhRUM3OURDNkU4MzRGODM3RjM0NDJEMTgiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzMjc1ODc4NzYwNywibmFtZSI6IkZhbnRvbUdlbmVyYXRpdmVBcnQifQ.9PVwHw6GZ3cTYtnANqnD3P4X9F9tcKIJk2KbnUwEuw8\"\n}","export default function (s) {\n    s.state = {}\n    s.dispatch = () => { }\n\n    // Variables\n    let hp;\n    let thresh, maxitr;\n    let xmin, xmax, ymin, ymax;\n    let r, theta, c1, c2, c3, c4;\n    let vals = [-1.2, 1.2, -1.2, 1.2];\n    let ms, ss, vs;\n    let minval, maxval;\n\n    // functions\n    let iterate_julia = (a, b)=> {\n        let i = 0;\n        while (i < maxitr) {\n            const fa = a * a - b * b + c1;\n            b = 2 * a * b + c2;\n            a = fa;\n            i += 1;\n            if (a * a + b * b > thresh) {\n                return i;\n            }\n            i++;\n        }\n    }\n\n    let gcd = (a, b) => {\n        if (a <= 1 || b <= 1) {\n            return 1;\n        } else if (a % b == 0) {\n            return b;\n        } else return gcd(b, a % b);\n    }\n\n    let resetImage = () => {\n        const { hash } = s.state;\n        console.log(hash);\n        hp = [];\n        for (let i = 2; i < hash.length; i = i + 2) {\n            const val = parseInt('0x' + hash.substring(i, i + 2));\n            console.log(i, val);\n            hp.push(val);\n        }\n        // Indices of parameters\n        // 0 : r\n        // 1 : theta\n        r = 0.7855 + s.map(hp[0], 0, 256, -0.1, + 0.1);\n        theta = s.map(hp[2], 0, 256, 0, 2*s.PI);\n        c1 = r * s.cos(theta);\n        c2 = r * s.sin(theta);\n\n        // 2, 3, 4 : Control options to select algorithm\n        maxitr = 3 * hp[4] + 8;\n        thresh = hp[2] * hp[3] + 3;\n        /*\n        thresh = pow(1.44, threshslider.value());\n        maxitr = maxitrslider.value();\n        c1 = -0.75;\n        c2 = 0.11;*/\n\n        // 5, 6 : Select x, y ranges\n        xmin = vals[0] - s.map(hp[5], 0, 256, 0, 0.5);\n        xmax = vals[1] + s.map(hp[5], 0, 256, 0, 0.5);\n        ymin = vals[2] - s.map(hp[6], 0, 256, 0, 0.5);\n        ymax = vals[3] + s.map(hp[6], 0, 256, 0, 0.5);\n\n        // 7, 8 : Underlying mandelbrot\n        // 9 : Modulus for color selection\n        // 10, 11, 12 : r, g, b\n        // 13, 14, 15 : color scale\n\n        // mr = hp[10] / gcd(hp[9], hp[10]);\n        // mg = hp[11] / gcd(hp[9], hp[11]);\n        // mb = hp[12] / gcd(hp[9], hp[12]);\n        ms = [];\n        ss = [];\n        vs = [];\n        for (let k = 0; k < 3; k++) {\n            const m = gcd(hp[9], hp[10 + k]);\n            ms.push(m == 1 ? hp[9] : m);\n            ss.push(m == 1 ? hp[13 + k] % 2 : m % 2);\n            vs.push(s.map(hp[13 + k], 0, 256, 0, 1));\n        }\n\n        // Other constants\n        minval = 255;\n        maxval = 0;\n    };\n\n    s.setup = () => {\n        s.createCanvas(800, 800);\n        hp = [];\n\n        //blendMode(DIFFERENCE);\n        console.log(\"Setup\");\n    }\n\n    s.draw = () => {\n        if (s.state.refresh) {\n            resetImage();\n            s.pixelDensity(1);\n            s.loadPixels();\n            // use hp3 for a mapping\n\n            console.log(r, theta, c1, c2, s.width, s.height);\n            for (let i = 0; i < s.width; i++) {\n                for (let j = 0; j < s.height; j++) {\n                    let pix = (i + j * s.width) * 4;\n                    c3 = s.map(i, 0, s.height, xmin, xmax);\n                    c4 = s.map(j, 0, s.width, ymin, ymax);\n                    let grad = iterate_julia(c3, c4);\n                    let val = s.map(grad, 0, maxitr, 0, 256);\n                    // Calculate Julia\n                    let cols = (maxitr - grad) * (i * i + j * j);\n                    for (let k = 0; k < 3; k++) {\n                        s.pixels[pix + k] = vs[k] * val + s.map((ss[k] * cols) % ms[k], 0, ms[k], 0, 255);\n                        if (s.pixels[pix + k] > maxval) maxval = s.pixels[pix + k];\n                        if (s.pixels[pix + k] < minval) minval = s.pixels[pix + k];\n                    }\n                    s.pixels[pix + 3] = 255;\n                }\n            }\n            console.log(\"Rescaling\", minval, maxval);\n            // Normalize\n            for (let i = 0; i < s.width; i++) {\n                for (let j = 0; j < s.height; j++) {\n                    let pix = (i + j * s.width) * 4;\n                    for (let k = 0; k < 3; k++) {\n                        s.pixels[pix + k] = s.map(s.pixels[pix + k], minval, maxval, 0, 255);\n                    }\n                }\n            }\n\n            s.updatePixels();\n            console.log(\"Redraw finished\");\n            s.dispatch(\n                {\n                    type: 'SET_VALUE',\n                    payload: {\n                        key: 'refresh',\n                        value: false,\n                    },\n                }\n            );\n            const canv = s.get();\n            console.log(canv);\n            s.dispatch(\n                {\n                    type: 'SET_VALUE',\n                    payload: {\n                        key: 'canvas',\n                        value: canv.canvas,\n                    },\n                }\n            );\n        }\n        \n    }\n\n    s.saveArt = () => {\n\n        \n    }\n}\n","import { NFTStorage } from 'nft.storage';\nimport { apikey } from \"../../../config.js\";\nexport default {\n    // wallet\n    address: undefined,\n    provider: undefined,\n    balance: 0,\n\n    // ipfs\n    ns_client: new NFTStorage({ token: apikey}),\n    canvas: undefined,\n    metadata: undefined,\n    \n    // contract\n    contract_address: \"0xc45c766C9D0639654590F16486C936b97eCd714D\",\n    FTMSCAN_API_KEY: undefined,\n    \n    // Generator\n    refresh: true,\n    hash: '0x8c4a76cf4a66c6ab0d6ce34a49a6a482',\n    bgndColor: '#ddd',\n    // playAudio: false,\n    errorMessage: \"\",\n    successMessage: \"\"\n}\n","export default function (state, { type, payload }) {\n    switch (type) {\n        \n        case 'SET_VALUE':\n            return {\n                ...state,\n                [payload.key]: payload.value,\n            }\n        case 'SET_ERROR':\n            return {\n                ...state,\n                'errorMessage': payload.value,\n                'successMessage': \"\"\n\n            }\n        case 'SET_SUCCESS':\n            return {\n                ...state,\n                \"successMessage\": payload.value,\n                \"errorMessage\": \"\"\n            }\n        \n        default:\n            return state\n    }\n}\n","import React, { createContext, useReducer } from 'react'\nimport PropTypes from 'prop-types'\n\nimport initState from './init-state'\nimport reducer from './reducer'\n\nexport const AppDispatchContext = createContext(() => { })\nexport const AppStateContext = createContext(initState)\n\nfunction AppStateProvider({ children }) {\n    const [state, dispatch] = useReducer(reducer, initState)\n\n    return (\n        <AppDispatchContext.Provider value={dispatch}>\n            <AppStateContext.Provider value={state}>\n                {children}\n            </AppStateContext.Provider>\n        </AppDispatchContext.Provider>\n    )\n}\n\nAppStateProvider.propTypes = {\n    children: PropTypes.any.isRequired,\n}\n\nexport default AppStateProvider\n","import React, { memo, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { generate } from 'shortid'\n\nexport default function (id = generate()) {\n    let canvas = null\n\n    function P5Wrapper({\n        sketch = () => { },\n        state = {},\n        dispatch = () => { },\n    }) {\n        console.log(`::: P5Wrapper(${id}) component has been re-rendered`)\n\n        const sketchContainer = useRef(null)\n\n        useEffect(() => {\n            console.log(`::: P5Wrapper(${id})/useEffect()`)\n            canvas = new window.p5(sketch, sketchContainer.current)\n            canvas.state = state\n            canvas.dispatch = dispatch\n\n            return () => {\n                console.log(`::: P5Wrapper(${id})/useEffect.return()`)\n                canvas.remove()\n            }\n        }, [dispatch, sketch, state])\n\n        return (\n            <div ref={sketchContainer} className=\"wrapper\">\n                \n            </div>\n        )\n        //<h5>{`P5Wrapper #${id}`}</h5>\n    }\n\n    P5Wrapper.propTypes = {\n        state: PropTypes.object,\n\n        dispatch: PropTypes.func,\n        sketch: PropTypes.func,\n    }\n\n    P5Wrapper.defaultProps = {\n        state: {},\n\n        dispatch: () => { },\n        sketch: () => { },\n    }\n\n    return memo(P5Wrapper, (_, nextProps) => {\n        canvas.state = { ...nextProps.state }\n\n        return true\n    })\n}\n","import React, { useContext, useEffect } from 'react'\n\nimport { generate } from 'shortid';\n\nimport sketchJulia from '../../sketches/sketch-julia';\n\nimport { AppDispatchContext, AppStateContext } from '../App/AppStateProvider';\nimport p5Wrapper from '../P5Wrapper';\n\n// contract\nimport Julia from '../contracts/FractalArt.sol/Julia.json';\nimport { ethers } from 'ethers';\n\nconst P5Wrapper = p5Wrapper(generate())\n\nconst JuliaDisplay =()=> {\n    const dispatch = useContext(AppDispatchContext)\n    const {\n        contract_address,\n        provider,\n        ns_client,\n        metadata,\n        canvas,\n        refresh,\n        hash,\n        errorMessage,\n        successMessage\n    } = useContext(AppStateContext)\n\n    const redraw = () => {\n        dispatch({\n            type: 'SET_VALUE',\n            payload: {\n                key: 'refresh',\n                value: true,\n            },\n        });\n        let _hash = '0x';\n        for (let i = 0; i < 32; i++) {\n            const val = Math.floor(Math.random() * 16);\n            _hash = _hash + val.toString(16);\n        }\n        console.log(_hash);\n        \n        dispatch({\n            type: 'SET_VALUE',\n            payload: {\n                key: 'hash',\n                value: _hash,\n            },\n        });\n\n    }\n\n    useEffect(() => {\n        redraw();\n    }, [])\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"inputs-wrapper\">\n                <button\n                    className=\"btn btn-warning\"\n                    type=\"button\"\n                    onClick={() => {\n                        redraw();\n                    } }>\n                    Generate New\n                </button>\n                <span></span>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-warning\"\n                    onClick={async () => {\n                        const bl = await canvas.toBlob(async function (blob) {// get content as blob\n                            let metadata;\n                            try {\n                                metadata = await ns_client.store({\n                                    name: `julia_${hash}`,\n                                    description: 'Julia',\n                                    image: blob\n                                });\n                                dispatch(\n                                    {\n                                        type: 'SET_VALUE',\n                                        payload: {\n                                            key: 'metadata',\n                                            value: metadata,\n                                        },\n                                    }\n                                );\n                            } catch (e) {\n                                console.log(\"Failed to upload\")\n                                dispatch(\n                                    {\n                                        type: 'SET_ERROR',\n                                        payload: {\n                                            value: \"Upload busy. Please try again.\",\n                                        },\n                                    });\n                                return;     \n                            }\n                            console.log(metadata.url);\n                            console.log(metadata.data.image.href);\n                            const token_uri = metadata.url;\n\n                            // Connect to metamask and create nft\n                            try {\n                                const ethereum = window.ethereum;\n                            \n                                if (ethereum.networkVersion === `250`) {\n                                    const provider = new ethers.providers.Web3Provider(ethereum);\n                                    const [signer_address] = await ethereum.request({ method: 'eth_requestAccounts' });\n                                    console.log(signer_address);\n\n                                    // Contract interactions\n                                    const contract = new ethers.Contract(\n                                        contract_address,\n                                        Julia.abi,\n                                        provider.getSigner(0));\n                                    \n                                    // make sure correct contract\n                                    console.log(parseInt(await contract.current_supply()));\n\n                                    // mint new nft\n                                    const txn = await contract.mintOne(signer_address, token_uri, { value: ethers.utils.parseEther(\"10.0\") });\n                                    const receipt = await txn.wait();\n                                    console.log(receipt.events);\n\n                                    dispatch(\n                                        {\n                                            type: 'SET_ERROR',\n                                            payload: {\n                                                value: \"\",\n                                            },\n                                        });\n                                    dispatch(\n                                        {\n                                            type: 'SET_SUCCESS',\n                                            payload: {\n                                                value: `Successful Mint : ${hash}`,\n                                            },\n                                        });\n                                } else {\n                                    console.log(\"Wrong network! Connect to fantom\")\n                                    dispatch(\n                                        {\n                                            type: 'SET_ERROR',\n                                            payload: {\n                                                value: \"Connect to Fantom Network on Metamask!!!\",\n                                            },\n                                        });\n                                    return;\n                                }\n                            } catch (e) {\n                                console.log(e);\n                                dispatch(\n                                {\n                                    type: 'SET_ERROR',\n                                    payload: {\n                                        key: 'errorMessage',\n                                        value: e.data.message,\n                                    },\n                                });\n                            }\n                            \n                        }, \"image/jpg\", 1.0);\n                        console.log(bl);\n                    }\n                        \n                    }>\n                    Mint NFT\n                </button>\n                <br />          \n            </div>\n            <div className=\"error-message\">\n                <label>{errorMessage}</label>\n            </div>\n            <div className=\"success-message\">\n                <label>{successMessage}</label>\n            </div>\n            <br />\n            <h5>Sketch for seed {hash}</h5>\n            <div className=\"section section-content\">\n                {(\n                    <P5Wrapper\n                        id=\"p5wrap\"\n                        dispatch={dispatch}\n                        sketch={sketchJulia}\n                        state={{ hash, refresh, canvas }}\n                    />\n                )}\n            </div>\n            <br />\n        </div>\n    )\n}\n\nexport default JuliaDisplay;\n\n/*\n                        console.log(canvas);\n                        let imageData = canvas.toDataURL('image/png');\n                        console.log(imageData);\n\n                        const metadata = await ns_client.store({\n                            name: `julia_${hash}`,\n                            description: 'Julia',\n                            image: new File([imageData], `julia_${hash}.png`, { type: 'image/png' })\n                        });\n                        dispatch(\n                            {\n                                type: 'SET_VALUE',\n                                payload: {\n                                    key: 'metadata',\n                                    value: metadata,\n                                },\n                            }\n                        );\n                        console.log(metadata.url);\n                        console.log(bl);\n                        */","import React from 'react'\n\nexport default function About() {\n    return (\n        <>\n            <div className=\"wrapper\">\n                <h2>How to mint</h2>\n                <ul>\n                    <li>Go to \"Mint\" tab</li>\n                    <li>Click 'Generate New' until you like the generated image</li>\n                    <li>Click 'Mint NFT'</li>\n                    <li>You will see a success message in green saying 'Successful Mint'</li>\n                    <li>If there's an error, you will see the details in red. Follow those instructions.</li>\n                    </ul>\n                <p>Have fun!!</p>\n                <br />\n                <h2>Julia NFT</h2>\n                <p>This is the first in a series of generative fractal NFTs that I have planned. There is a limit of 3 NFTs per address. Click on 'Generate New' until you find what you like, then click 'Mint'. You'll see a success message in green if the transaction goes through.</p>\n                    <ul>\n                    <li>Contract Address : 0xc45c766C9D0639654590F16486C936b97eCd714D</li>\n                    <li>Max Supply : 1000</li>\n                    <li>Price : 10 FTM</li>\n                    <li>Max mints per address : 3</li>\n                    </ul>\n                <p>The fractals are generated through a mix of Julia set and interesting number theoretic properties. The generation algorithm is fixed and the code will be committed in a transaction to the blockchain when the mints reach 100.</p>\n                <br />\n                <h2>About me</h2>\n                <p>Hello, I am Cthae. I am an independent artist and developer avidly learning about blockchain. The more I learn, the more I want to create something awesome. You can checkout my other projects as well </p>\n                <ul>\n                    <li><a href=\"https://modernalcibiades.github.io/RarityCaretakerDapp/\">Rarity Caretaker : Manage all Rarity Manifested summoners</a></li>\n                    <li><a href=\"https://github.com/modernAlcibiades/DragonPriestToken\">Dragon Priest : Take care of Lair of Wisdom dragons and earn community tokens</a></li>\n                </ul>\n            </div>\n        </>\n    )\n}\n","import { FaBars } from 'react-icons/fa';\nimport { NavLink as Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Nav = styled.nav`\n  background: #222;\n  height: 80px;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem calc((100vw - 1000px) / 2);\n  z-index: 10;\n  /* Third Nav */\n  justify-content: flex-start;\n`;\n\nexport const NavLink = styled(Link)`\n  color: #fff;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding: 0 1rem;\n  height: 100%;\n  cursor: pointer;\n  &.active {\n    color: #ffc107;\n  }\n`;\n\nexport const Bars = styled(FaBars)`\n  display: none;\n  color: #fff;\n  @media screen and (max-width: 768px) {\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(-100%, 75%);\n    font-size: 1.8rem;\n    cursor: pointer;\n  }\n`;\n\nexport const NavMenu = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: -24px;\n  /* Second Nav */\n  /* margin-right: 24px; */\n  /* Third Nav */\n  /* width: 100vw;\n  white-space: nowrap; */\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtn = styled.nav`\n  display: flex;\n  align-items: center;\n  margin-right: 24px;\n  /* Third Nav */\n  /* justify-content: flex-end;\n  width: 100vw; */\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtnLink = styled(Link)`\n  border-radius: 4px;\n  background: #256ce1;\n  padding: 10px 22px;\n  color: #fff;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  /* Second Nav */\n  margin-left: 24px;\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background: #fff;\n    color: #010606;\n  }\n`;","import React from 'react';\nimport {\n  Nav,\n  NavLink,\n  Bars,\n  NavMenu,\n  NavBtn,\n  NavBtnLink\n} from './NavbarElements';\n\nconst Navbar = () => {\n  return (\n    <>\n      <Nav>\n        \n        <div className=\"logo\">\n          <NavLink to='/'>\n              <h1>Julia</h1>\n          </NavLink>\n        </div>\n\n        <Bars />\n        <NavMenu>\n          <NavLink to='/about' activeStyle>\n            About\n          </NavLink>\n          <NavLink to='/mint' activeStyle>\n            Mint NFT\n          </NavLink>\n          <NavLink to='/dashboard' activeStyle>\n            My Dashboard\n          </NavLink>\n          {/* Second Nav */}\n          {/* <NavBtnLink to='/sign-in'>Sign In</NavBtnLink> */}\n        </NavMenu>\n        {/* {\n          <NavBtn>\n            <NavBtnLink to='/signin'>Connect Wallet</NavBtnLink>\n          </NavBtn>\n        } */}\n      </Nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <>\n            <div className=\"wrapper\">\n                <h2>Coming soon</h2>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport JuliaDisplay from '../JuliaDisplay';\nimport About from \"../About\";\nimport Navbar from \"../Navbar\";\nimport Dashboard from \"../Dashboard\";\n\nexport default function AppContent() {\n    const prefix = '/'\n    return (\n        <>\n            <div className=\"app-content\">\n                <Router basename='/Julia'>\n                    <Navbar />\n                    <Switch>\n                        <Route path={prefix} exact component={About} />\n                        <Route path={prefix + 'about'} component={About} />\n                        <Route path={prefix + 'mint'} component={JuliaDisplay} />\n                        <Route path={prefix + 'dashboard'} component={Dashboard} />\n                    </Switch>\n                </Router>\n            </div>\n        </>\n    )\n}\n// {\n//                     <div className=\"title\">\n//                     <h1>Julia</h1>\n//                     <hr width=\"30%\" color=\"grey\" />\n//                 </div>\n//                 <JuliaDisplay />\n//                 <About />\n// }\n","import React from 'react'\nimport { hot } from 'react-hot-loader'\n\nimport AppContent from '../AppContent'\n\nimport AppStateProvider from './AppStateProvider'\n\nimport './style.css'\n\nfunction App() {\n    return (\n        <AppStateProvider>\n            <AppContent />\n        </AppStateProvider>\n    )\n}\n\nexport default module.hot ? hot(module)(App) : App\n","import React from 'react'\nimport { render } from 'react-dom'\n\nimport App from './components/App'\n\nrender(<App />, window.document.querySelector('#app-root'))\n"],"sourceRoot":""}